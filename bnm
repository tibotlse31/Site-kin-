<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>BNM Neuro Périphérique</title>
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet" />
  <style>
    body {
      font-family: 'Open Sans', sans-serif;
      background-color: #f7f9fa;
      margin: 0;
      padding: 20px;
      color: #333;
    }
    h1 {
      color: #2BAE66;
      text-align: center;
      margin-bottom: 30px;
    }
    .search-bar, .filters {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 20px;
      flex-wrap: wrap;
      align-items: center;
    }
    input[type="text"], select {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      min-width: 250px;
      font-size: 16px;
    }
    #racineCheckboxes label {
      user-select: none;
      font-size: 14px;
      margin-right: 10px;
      cursor: pointer;
    }
    #racineCheckboxes input[type="checkbox"] {
      margin-right: 4px;
      cursor: pointer;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: #fff;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    th, td {
      padding: 12px 15px;
      text-align: left;
    }
    th {
      background-color: #2BAE66;
      color: #fff;
    }
    tr:nth-child(even) {
      background-color: #f1f1f1;
    }
    tr:hover {
      background-color: #d4f3e2;
    }
  </style>
</head>
<body>
  <h1>BNM Neuro Périphérique</h1>

  <div class="search-bar">
    <input type="text" id="searchInput" placeholder="Rechercher un muscle, un nerf ou une racine..." />
  </div>

  <div class="filters">
    <select id="nerfFilter">
      <option value="">-- Sélectionner un nerf --</option>
    </select>

    <div id="racineCheckboxes">
      <!-- Checkboxes des racines générées ici -->
    </div>
  </div>

  <table id="muscleTable">
    <thead>
      <tr>
        <th>Muscle</th>
        <th>Nerf</th>
        <th>Racines</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <!-- Données injectées ici -->
    </tbody>
  </table>

  <script>
    let data = [];

    fetch('csvjson.json')
      .then(response => response.json())
      .then(json => {
        data = json;
        populateFilters();
        displayTable(data);
      })
      .catch(err => {
        console.error('Erreur chargement JSON:', err);
      });

    const searchInput = document.getElementById('searchInput');
    const nerfFilter = document.getElementById('nerfFilter');
    const racineCheckboxes = document.getElementById('racineCheckboxes');
    const tableBody = document.querySelector('#muscleTable tbody');

    function populateFilters() {
      // Nerfs en select
      const nerfs = [...new Set(data.map(item => item.Nerf).filter(n => n))].sort();

      // Racines uniques extraites et triées
      const racinesSet = new Set();
      data.forEach(item => {
        if (item.Racines) {
          item.Racines.split(/[-.,; ]+/).forEach(r => racinesSet.add(r.trim()));
        }
      });
      const racines = Array.from(racinesSet).sort();

      nerfs.forEach(nerf => {
        const option = document.createElement('option');
        option.value = nerf;
        option.textContent = nerf;
        nerfFilter.appendChild(option);
      });

      racines.forEach(racine => {
        const label = document.createElement('label');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.value = racine;
        checkbox.name = 'racines';
        checkbox.addEventListener('change', filterData);
        label.appendChild(checkbox);
        label.appendChild(document.createTextNode(' ' + racine));
        racineCheckboxes.appendChild(label);
      });
    }

    function displayTable(filteredData) {
      tableBody.innerHTML = '';
      filteredData.forEach(item => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${item.Muscle || ''}</td>
          <td>${item.Nerf || ''}</td>
          <td>${item.Racines || ''}</td>
          <td>${item.Fonctions || ''}</td>
        `;
        tableBody.appendChild(row);
      });
    }

    function filterData() {
      const search = searchInput.value.toLowerCase();
      const nerf = nerfFilter.value;

      const checkedRacines = Array.from(document.querySelectorAll('input[name="racines"]:checked')).map(cb => cb.value);

      const filtered = data.filter(item => {
        const text = `${item.Muscle} ${item.Nerf} ${item.Racines} ${item.Fonctions}`.toLowerCase();
        const matchesSearch = !search || text.includes(search);
        const matchesNerf = !nerf || item.Nerf === nerf;

        let matchesRacines = true;
        if (checkedRacines.length > 0) {
          const itemRacines = item.Racines ? item.Racines.split(/[-.,; ]+/).map(r => r.trim()) : [];
          // Ici on filtre si TOUTES les racines cochées sont présentes dans l’item
          matchesRacines = checkedRacines.every(r => itemRacines.includes(r));
        }

        return matchesSearch && matchesNerf && matchesRacines;
      });

      displayTable(filtered);
    }

    searchInput.addEventListener('keyup', filterData);
    nerfFilter.addEventListener('change', filterData);
  </script>
</body>
</html>
